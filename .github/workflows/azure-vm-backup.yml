name: Azure VM Disk Backup

on:
  workflow_dispatch:
  schedule:
    - cron: '30 11 * * *'  # Daily at 5:00 PM IST

jobs:
  backup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Azure CLI
        run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Load backup config
        id: load_config
        run: echo "CONFIG=$(jq -c . < vm_backup_config.json)" >> $GITHUB_ENV

      - name: Run VM backup
        run: |
          CREDS_SUB_A='${{ secrets.AZURE_CREDENTIALS_SUB_A }}'
          CREDS_SUB_B='${{ secrets.AZURE_CREDENTIALS_SUB_B }}'

          CLIENT_ID_A=$(echo "$CREDS_SUB_A" | jq -r '.clientId')
          CLIENT_SECRET_A=$(echo "$CREDS_SUB_A" | jq -r '.clientSecret')
          TENANT_ID_A=$(echo "$CREDS_SUB_A" | jq -r '.tenantId')
          SUB_A=$(echo "$CREDS_SUB_A" | jq -r '.subscriptionId')

          CLIENT_ID_B=$(echo "$CREDS_SUB_B" | jq -r '.clientId')
          CLIENT_SECRET_B=$(echo "$CREDS_SUB_B" | jq -r '.clientSecret')
          TENANT_ID_B=$(echo "$CREDS_SUB_B" | jq -r '.tenantId')
          SUB_B=$(echo "$CREDS_SUB_B" | jq -r '.subscriptionId')

          echo "$CONFIG" | jq -c '.[]' | while read vm; do
            NAME=$(echo $vm | jq -r '.name')
            DISK=$(echo $vm | jq -r '.disk_name')
            RG=$(echo $vm | jq -r '.resource_group')
            LOC=$(echo $vm | jq -r '.location')
            SA=$(echo $vm | jq -r '.storage_account')
            CONTAINER=$(echo $vm | jq -r '.container_name')

            echo "üîê Logging into Subscription A (source)..."
            az login --service-principal -u "$CLIENT_ID_A" -p "$CLIENT_SECRET_A" --tenant "$TENANT_ID_A" --allow-no-subscriptions
            az account set --subscription "$SUB_A"

            SNAPSHOT_NAME="snap-${NAME}-$(date +%Y%m%d%H%M%S)"
            echo "üì∏ Creating snapshot: $SNAPSHOT_NAME"
            az snapshot create \
              --name "$SNAPSHOT_NAME" \
              --resource-group "$RG" \
              --source "$DISK" \
              --location "$LOC" \
              --sku Standard_LRS

            echo "üîó Generating SAS URL for snapshot..."
            SAS_JSON=$(az snapshot grant-access --name "$SNAPSHOT_NAME" --resource-group "$RG" --duration-in-seconds 86400)
            SAS_URL=$(echo "$SAS_JSON" | jq -r '.accessSas // .accessSAS // empty')

            if [[ "$SAS_URL" == "null" || -z "$SAS_URL" ]]; then
              echo "‚ùå Failed to generate SAS URL"; exit 1
            fi

            echo "üîê Logging into Subscription B (destination)..."
            az login --service-principal -u "$CLIENT_ID_B" -p "$CLIENT_SECRET_B" --tenant "$TENANT_ID_B" --allow-no-subscriptions
            az account set --subscription "$SUB_B"

            DEST_BLOB="${SNAPSHOT_NAME}.vhd"
            DEST_URL="https://${SA}.blob.core.windows.net/${CONTAINER}/${DEST_BLOB}"
            echo "‚òÅÔ∏è Copying snapshot to Subscription B blob storage..."
            az storage blob copy start \
              --account-name "$SA" \
              --auth-mode login \
              --destination-container "$CONTAINER" \
              --destination-blob "$DEST_BLOB" \
              --source-uri "$SAS_URL"

            echo "‚è≥ Waiting for blob copy to complete..."
            while [ "$(az storage blob show --account-name "$SA" --container-name "$CONTAINER" --name "$DEST_BLOB" --query 'properties.copy.status' -o tsv)" != "success" ]; do
              sleep 10
              echo "Still copying..."
            done

            echo "‚úÖ Snapshot copied: $DEST_URL"

            echo "üîô Switching back to Subscription A to clean up..."
            az login --service-principal -u "$CLIENT_ID_A" -p "$CLIENT_SECRET_A" --tenant "$TENANT_ID_A" --allow-no-subscriptions
            az account set --subscription "$SUB_A"
            az snapshot revoke-access --name "$SNAPSHOT_NAME" --resource-group "$RG"
            az snapshot delete --name "$SNAPSHOT_NAME" --resource-group "$RG"

            echo "‚úÖ Backup done for: $NAME"
          done
