name: Azure VM Backup

on:
  workflow_dispatch:

jobs:
  backup-vms:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install jq
        run: sudo apt-get install jq -y

      - name: Load VM configuration and run backup
        env:
          CONFIG_FILE: vm_backup_config.json
        run: |
          CONFIGS=$(cat $CONFIG_FILE)

          echo "$CONFIGS" | jq -c '.[]' | while read -r vm;
          do
            NAME=$(echo "$vm" | jq -r '.name')
            DISK=$(echo "$vm" | jq -r '.disk_name')
            RG=$(echo "$vm" | jq -r '.resource_group')
            LOC=$(echo "$vm" | jq -r '.location')
            SUB=$(echo "$vm" | jq -r '.subscription_id')
            SA=$(echo "$vm" | jq -r '.storage_account')
            CONTAINER=$(echo "$vm" | jq -r '.container_name')

            echo "Backing up VM: $NAME"
            az account set --subscription "$SUB"

            SNAPSHOT_NAME="$NAME-$(date +%Y%m%d%H%M%S)-snapshot"
            TEMP_DISK_NAME="$NAME-tempdisk-$(date +%s)"
            DEST_BLOB_NAME="$SNAPSHOT_NAME.vhd"

            echo "üì∏ Creating snapshot: $SNAPSHOT_NAME"
            az snapshot create \
              --resource-group "$RG" \
              --name "$SNAPSHOT_NAME" \
              --location "$LOC" \
              --source "$DISK" \
              --sku Standard_LRS \
              --output none || { echo "‚ùå Snapshot creation failed for $NAME"; exit 1; }

            echo "üíæ Creating temporary disk from snapshot: $TEMP_DISK_NAME"
            az disk create \
              --resource-group "$RG" \
              --name "$TEMP_DISK_NAME" \
              --source "$SNAPSHOT_NAME" \
              --location "$LOC" \
              --sku Standard_LRS \
              --output none || { echo "‚ùå Disk creation failed from snapshot for $NAME"; exit 1; }

            echo "üîó Generating SAS URL from temporary disk..."
            SAS_URL=$(az disk grant-access \
              --resource-group "$RG" \
              --name "$TEMP_DISK_NAME" \
              --duration-in-seconds 86400 \
              --query accessSas -o tsv) || { echo "‚ùå Failed to generate SAS URL from disk for $NAME"; exit 1; }

            if [ -z "$SAS_URL" ]; then
              echo "‚ùå SAS URL from disk is empty. Aborting."
              exit 1
            fi

            echo "üì¶ Creating blob container if needed..."
            az storage container create \
              --name "$CONTAINER" \
              --account-name "$SA" \
              --auth-mode login

            echo "‚òÅÔ∏è Copying disk to blob storage..."
            az storage blob copy start \
              --account-name "$SA" \
              --destination-blob "$DEST_BLOB_NAME" \
              --destination-container "$CONTAINER" \
              --source-uri "$SAS_URL" \
              --auth-mode login \
              || { echo "‚ùå Blob copy failed for $NAME"; exit 1; }

            echo "‚è≥ Waiting for blob copy to complete..."
            while true; do
              STATUS=$(az storage blob show \
                --account-name "$SA" \
                --container-name "$CONTAINER" \
                --name "$DEST_BLOB_NAME" \
                --query 'properties.copy.status' -o tsv)
              echo "Copy status: $STATUS"
              if [ "$STATUS" == "success" ]; then
                break
              elif [ "$STATUS" == "pending" ]; then
                sleep 10
              else
                echo "‚ùå Blob copy failed with status: $STATUS"
                exit 1
              fi
            done

            echo "‚úÖ Blob copy completed. Revoking access and cleaning up..."
            az disk revoke-access --resource-group "$RG" --name "$TEMP_DISK_NAME"
            az disk delete --resource-group "$RG" --name "$TEMP_DISK_NAME" --yes
            az snapshot delete --resource-group "$RG" --name "$SNAPSHOT_NAME"

            echo "‚úÖ Backup finished for VM: $NAME"

          done
