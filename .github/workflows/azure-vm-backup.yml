name: Azure VM Disk Backup

on:
  workflow_dispatch:
  schedule:
    - cron: '30 11 * * *'  # Daily at 5:00 PM IST

env:
  AZURE_STORAGE_KEY_A: ${{ secrets.AZURE_STORAGE_KEY_A }}
  AZURE_STORAGE_KEY_B: ${{ secrets.AZURE_STORAGE_KEY_B }}

jobs:
  backup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Azure CLI
        run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Load backup config
        id: load_config
        run: echo "CONFIG=$(jq -c . < vm_backup_config.json)" >> $GITHUB_ENV

      - name: Run VM backup
        run: |
          echo "$CONFIG" | jq -c '.[]' | while read vm; do
            NAME=$(echo $vm | jq -r '.name')
            DISK=$(echo $vm | jq -r '.disk_name')
            RG=$(echo $vm | jq -r '.resource_group')
            LOC=$(echo $vm | jq -r '.location')
            SUB_A=$(echo $vm | jq -r '.subscription_id')
            CLIENT_ID=$(echo $vm | jq -r '.client_id')
            CLIENT_SECRET=$(echo $vm | jq -r '.client_secret')
            TENANT_ID=$(echo $vm | jq -r '.tenant_id')

            SUB_B=$(echo $vm | jq -r '.destination_subscription_id')
            RG_B=$(echo $vm | jq -r '.destination_resource_group')
            SA=$(echo $vm | jq -r '.storage_account')
            CONTAINER=$(echo $vm | jq -r '.container_name')

            echo "üîê Logging into Subscription A (source)..."
            az login --service-principal -u "$CLIENT_ID" -p "$CLIENT_SECRET" --tenant "$TENANT_ID"
            az account set --subscription "$SUB_A"

            SNAPSHOT_NAME="snap-${NAME}-$(date +%Y%m%d%H%M%S)"
            echo "üì∏ Creating snapshot: $SNAPSHOT_NAME"
            az snapshot create \
              --name "$SNAPSHOT_NAME" \
              --resource-group "$RG" \
              --source "$DISK" \
              --location "$LOC" \
              --sku Standard_LRS

            echo "üîó Generating SAS URL for snapshot..."
            MAX_RETRIES=5
            RETRY_DELAY=10
            for i in $(seq 1 $MAX_RETRIES); do
              echo "Attempt $i to grant snapshot access..."
              SAS_JSON=$(az snapshot grant-access \
                --name "$SNAPSHOT_NAME" \
                --resource-group "$RG" \
                --duration-in-seconds 86400 2>&1)

              echo "SAS JSON: $SAS_JSON"  # Debug log

              SNAPSHOT_URL=$(echo "$SAS_JSON" | jq -r '.accessSas // .accessSAS // empty')

              if [[ -n "$SNAPSHOT_URL" ]]; then
                echo "‚úÖ SAS URL generated successfully"
                break
              else
                echo "‚ö†Ô∏è SAS URL not found. Retrying in $RETRY_DELAY seconds..."
                sleep $RETRY_DELAY
              fi
            done

            if [[ -z "$SNAPSHOT_URL" ]]; then
              echo "‚ùå Failed to generate SAS URL after $MAX_RETRIES attempts."
              exit 1
            fi

            echo "üîê Switching to Subscription B (destination)..."
            az account set --subscription "$SUB_B"

            DEST_BLOB="${SNAPSHOT_NAME}.vhd"
            echo "‚òÅÔ∏è Copying snapshot to Subscription B blob storage..."
            az storage blob copy start \
              --account-name "$SA" \
              --account-key "$AZURE_STORAGE_KEY_B" \
              --destination-container "$CONTAINER" \
              --destination-blob "$DEST_BLOB" \
              --source-uri "$SNAPSHOT_URL"

            echo "‚è≥ Waiting for blob copy to complete..."
            while [ "$(az storage blob show --account-name "$SA" --container-name "$CONTAINER" --name "$DEST_BLOB" --query 'properties.copy.status' -o tsv)" != "success" ]; do
              sleep 10
              echo "Still copying..."
            done

            echo "‚úÖ Snapshot copied to blob: https://${SA}.blob.core.windows.net/${CONTAINER}/${DEST_BLOB}"

            echo "üîô Switching back to Subscription A to clean up..."
            az account set --subscription "$SUB_A"
            az snapshot revoke-access --name "$SNAPSHOT_NAME" --resource-group "$RG"
            az snapshot delete --name "$SNAPSHOT_NAME" --resource-group "$RG"

            echo "‚úÖ Backup completed for: $NAME"
          done
